// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Rewarder__pendingTokensResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }

  getRewardTokens(): Array<Address> {
    return this.value0;
  }

  getRewardAmounts(): Array<BigInt> {
    return this.value1;
  }
}

export class Rewarder extends ethereum.SmartContract {
  static bind(address: Address): Rewarder {
    return new Rewarder("Rewarder", address);
  }

  cadence(): BigInt {
    let result = super.call("cadence", "cadence():(uint256)", []);

    return result[0].toBigInt();
  }

  try_cadence(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("cadence", "cadence():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositBonus(): BigInt {
    let result = super.call("depositBonus", "depositBonus():(uint256)", []);

    return result[0].toBigInt();
  }

  try_depositBonus(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("depositBonus", "depositBonus():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastDepositTime(param0: BigInt): BigInt {
    let result = super.call(
      "lastDepositTime",
      "lastDepositTime(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_lastDepositTime(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastDepositTime",
      "lastDepositTime(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minimum(): BigInt {
    let result = super.call("minimum", "minimum():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minimum(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minimum", "minimum():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pendingTokens(
    relicId: BigInt,
    oathAmount: BigInt
  ): Rewarder__pendingTokensResult {
    let result = super.call(
      "pendingTokens",
      "pendingTokens(uint256,uint256):(address[],uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(relicId),
        ethereum.Value.fromUnsignedBigInt(oathAmount)
      ]
    );

    return new Rewarder__pendingTokensResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray()
    );
  }

  try_pendingTokens(
    relicId: BigInt,
    oathAmount: BigInt
  ): ethereum.CallResult<Rewarder__pendingTokensResult> {
    let result = super.tryCall(
      "pendingTokens",
      "pendingTokens(uint256,uint256):(address[],uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(relicId),
        ethereum.Value.fromUnsignedBigInt(oathAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Rewarder__pendingTokensResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray()
      )
    );
  }

  reliquary(): Address {
    let result = super.call("reliquary", "reliquary():(address)", []);

    return result[0].toAddress();
  }

  try_reliquary(): ethereum.CallResult<Address> {
    let result = super.tryCall("reliquary", "reliquary():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardMultiplier(): BigInt {
    let result = super.call(
      "rewardMultiplier",
      "rewardMultiplier():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rewardMultiplier(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardMultiplier",
      "rewardMultiplier():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardToken(): Address {
    let result = super.call("rewardToken", "rewardToken():(address)", []);

    return result[0].toAddress();
  }

  try_rewardToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("rewardToken", "rewardToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _rewardMultiplier(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _depositBonus(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _minimum(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _cadence(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _rewardToken(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _reliquary(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ClaimDepositBonusCall extends ethereum.Call {
  get inputs(): ClaimDepositBonusCall__Inputs {
    return new ClaimDepositBonusCall__Inputs(this);
  }

  get outputs(): ClaimDepositBonusCall__Outputs {
    return new ClaimDepositBonusCall__Outputs(this);
  }
}

export class ClaimDepositBonusCall__Inputs {
  _call: ClaimDepositBonusCall;

  constructor(call: ClaimDepositBonusCall) {
    this._call = call;
  }

  get relicId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimDepositBonusCall__Outputs {
  _call: ClaimDepositBonusCall;

  constructor(call: ClaimDepositBonusCall) {
    this._call = call;
  }
}

export class OnDepositCall extends ethereum.Call {
  get inputs(): OnDepositCall__Inputs {
    return new OnDepositCall__Inputs(this);
  }

  get outputs(): OnDepositCall__Outputs {
    return new OnDepositCall__Outputs(this);
  }
}

export class OnDepositCall__Inputs {
  _call: OnDepositCall;

  constructor(call: OnDepositCall) {
    this._call = call;
  }

  get relicId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get depositAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class OnDepositCall__Outputs {
  _call: OnDepositCall;

  constructor(call: OnDepositCall) {
    this._call = call;
  }
}

export class OnOathRewardCall extends ethereum.Call {
  get inputs(): OnOathRewardCall__Inputs {
    return new OnOathRewardCall__Inputs(this);
  }

  get outputs(): OnOathRewardCall__Outputs {
    return new OnOathRewardCall__Outputs(this);
  }
}

export class OnOathRewardCall__Inputs {
  _call: OnOathRewardCall;

  constructor(call: OnOathRewardCall) {
    this._call = call;
  }

  get relicId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get rewardAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class OnOathRewardCall__Outputs {
  _call: OnOathRewardCall;

  constructor(call: OnOathRewardCall) {
    this._call = call;
  }
}

export class OnWithdrawCall extends ethereum.Call {
  get inputs(): OnWithdrawCall__Inputs {
    return new OnWithdrawCall__Inputs(this);
  }

  get outputs(): OnWithdrawCall__Outputs {
    return new OnWithdrawCall__Outputs(this);
  }
}

export class OnWithdrawCall__Inputs {
  _call: OnWithdrawCall;

  constructor(call: OnWithdrawCall) {
    this._call = call;
  }

  get relicId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get withdrawalAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class OnWithdrawCall__Outputs {
  _call: OnWithdrawCall;

  constructor(call: OnWithdrawCall) {
    this._call = call;
  }
}
