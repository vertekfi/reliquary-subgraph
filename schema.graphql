type Reliquary @entity {
  id: Bytes!
  emissionToken: Token!
  totalAllocPoint: Int!
  poolCount: Int!
  relicCount: Int!
  emissionCurve: EmissionCurve!
  pools: [Pool!] @derivedFrom(field: "reliquary")
  users: [User!] @derivedFrom(field: "reliquary")
  relics: [Relic!]! @derivedFrom(field: "reliquary")
  harvests: [Harvest!]! @derivedFrom(field: "reliquary")
}

type EmissionCurve @entity {
  id: Bytes!
  address: Bytes!
  rewardPerSecond: BigDecimal!
}

type Pool @entity {
  id: Bytes!
  pid: Int!
  name: String!
  reliquary: Reliquary!
  rewarder: Rewarder
  nftDescriptor: Bytes!
  poolTokenAddress: Bytes!
  poolToken: Token!
  totalBalance: BigDecimal!
  relics: [Relic!]! @derivedFrom(field: "pool")
  relicCount: Int!
  levels: [PoolLevel!]! @derivedFrom(field: "pool")
  allocPoint: Int!
  dailyPoolSnapshots: [DailyPoolSnapshot!]! @derivedFrom(field: "pool")
  dailyRelicSnapshots: [DailyRelicSnapshot!]! @derivedFrom(field: "pool")
}

type PoolLevel @entity {
  id: Bytes!
  pool: Pool!
  level: Int!
  balance: BigDecimal!
  requiredMaturity: Int!
  allocationPoints: Int!
  relics: [Relic!]! @derivedFrom(field: "poolLevel")
}

type DailyPoolSnapshot @entity {
  id: Bytes!
  pool: Pool!
  poolId: Int!
  snapshotTimestamp: Int!
  totalBalance: BigDecimal!
  dailyDeposited: BigDecimal!
  dailyWithdrawn: BigDecimal!
  relicCount: Int!
}

type Relic @entity {
  id: Bytes!
  relicId: Int!
  reliquary: Reliquary!
  pool: Pool!
  pid: Int!
  userAddress: Bytes!
  user: User!
  balance: BigDecimal!
  level: Int!
  poolLevel: PoolLevel!
  entryTimestamp: Int!
  harvests: [Harvest!]! @derivedFrom(field: "relic")
  dailyRelicSnapshots: [DailyRelicSnapshot!]! @derivedFrom(field: "relic")
}

type Harvest @entity(immutable: true) {
  id: Bytes!
  amount: BigDecimal!
  token: Token!
  timestamp: Int!
  reliquary: Reliquary!
  relic: Relic!
  user: User!
}

type User @entity(immutable: true) {
  id: Bytes!
  reliquary: Reliquary!
  address: Bytes!
  relics: [Relic!]! @derivedFrom(field: "user")
  dailyRelicSnapshots: [DailyRelicSnapshot!]! @derivedFrom(field: "user")
}

type DailyRelicSnapshot @entity {
  id: ID!
  relicId: Int!
  relic: Relic!
  snapshotTimestamp: Int!
  user: User!
  userAddress: Bytes!
  poolId: Int!
  pool: Pool!
  balance: BigDecimal!
  entryTimestamp: Int!
  level: Int!
}

type Rewarder @entity(immutable: true) {
  id: Bytes!
  emissions: [RewarderEmission!]! @derivedFrom(field: "rewarder")
}

type RewarderEmission @entity {
  id: Bytes!
  rewarder: Rewarder!
  rewardToken: Token!
  rewardTokenAddress: Bytes!
  rewardPerSecond: BigDecimal!
}

type Token @entity(immutable: true) {
  id: Bytes!
  address: Bytes!
  name: String!
  symbol: String!
  decimals: Int!
}
